syntax="proto3";
package spkdfs;
option cc_generic_services = true;

enum ERROR_CODE {
  COMMON_EXCEPTION = 0;
  PATH_EXISTS_EXCEPTION = 1;
  PATH_NOT_EXISTS_EXCEPTION = 2;
  EXPECTED_FILE_EXCEPTION = 3;
  EXPECTED_DIR_EXCEPTION = 4;
  OUT_OF_RANGE_EXCEPTION = 5;
};
// 定义一个错误消息
message ErrorMessage {
  ERROR_CODE code = 1;  // 错误码
  string message = 2;  // 错误描述信息
};

message Request {
};

message Response {
  bool success = 1;
  ErrorMessage fail_info = 2;
  string redirect = 3;
// int fail_code = 4;
};

message CommonResponse {
  Response common = 1;
};

message NNPathRequest {
  string path = 1;
}
message NNLsResponse {
  Response common = 1;
  string data = 2;
};

message NNGetResponse {
  Response common = 1;
  string storage_type = 2;
  uint64 filesize = 3;
  repeated string blkids = 4;
};

message NNPutRequest {
  string path = 1;
  string storage_type = 2;
}

message NNPutResponse {
  Response common = 1;
  repeated string nodes = 2;
};


message NNPutOKRequest {
  string path = 1;
  uint64 filesize = 2;
  repeated string sub = 3;
};

message NNGetMasterResponse {
  Response common = 1;
  string node = 2;
}

message NNGetDatanodesResponse {
  Response common = 1;
  repeated string nodes = 2;
};

service NamenodeService {
  rpc ls(NNPathRequest) returns (NNLsResponse);
  rpc mkdir(NNPathRequest) returns (CommonResponse);
  rpc rm(NNPathRequest) returns (CommonResponse);
  rpc put(NNPutRequest) returns (NNPutResponse);
  // datanode notice namenode blk storeed ok;
  rpc put_ok(NNPutOKRequest) returns (CommonResponse);
  rpc get_master(Request) returns (NNGetMasterResponse);
  // rpc get_datanodes(Request) returns (NNGetDatanodesResponse);
};

message DNGetRequest {
  string blkid = 1;
}
message DNGetResponse {
  Response common = 1;
  bytes data = 2;
};

message DNPutRequest {
  string blkid = 1;
  bytes data = 2;
};

message DNGetNamenodesResponse {
  Response common = 1;
  repeated string nodes = 2;
};

message DNGetDatanodesResponse {
  Response common = 1;
  repeated string nodes = 2;
};

service DatanodeService {
  rpc put(DNPutRequest) returns (CommonResponse);
  rpc get(DNGetRequest) returns (DNGetResponse);
  rpc get_namenodes(Request) returns (DNGetNamenodesResponse);
  rpc get_datanodes(Request) returns (DNGetDatanodesResponse);
};

service CommonService {
  rpc echo(Request) returns (CommonResponse);
}

